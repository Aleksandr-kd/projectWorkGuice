name: Run UI Tests with Allure

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  ui-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Install Docker Compose
        run: |
          DOWNLOAD_URL="https://github.com/docker/compose/releases/download/v2.24.5/docker-compose-linux-x86_64"
          TARGET_PATH="/usr/local/bin/docker-compose"
          sudo curl -L "$DOWNLOAD_URL" -o "$TARGET_PATH"
          sudo chmod +x "$TARGET_PATH"

      - name: Pull latest Selenoid image
        run: docker pull aerokube/selenoid:latest-release

      - name: Restart Selenoid
        run: |
          docker-compose down
          docker system prune -a -f
          docker-compose up -d


      - name: Проверка версии селеноид
        run: docker exec selenoid /usr/bin/selenoid -version

      - name: Логи нового версии селеноид
        run: docker logs selenoid | head -n 10

#      - name: Удаление и Установка нового версии селеноид
#        run: |
#          docker rm -f 5aaaa838c21d
#          docker rmi aerokube/selenoid:latest-release
#          docker pull aerokube/selenoid:latest-release
#          docker-compose up -d

#      - name: Stop and remove all containers using aerokube/selenoid image
#        run: |
#          CONTAINERS=$(docker ps -aq --filter ancestor=aerokube/selenoid:latest-release)
#          if [ -n "$CONTAINERS" ]; then
#            docker rm -f $CONTAINERS
#            echo "Stopped and removed containers: $CONTAINERS"
#          else
#            echo "No containers found using aerokube/selenoid image"
#          fi
#
#      - name: Remove aerokube/selenoid image
#        run: |
#          IMAGE_ID=$(docker images -q aerokube/selenoid:latest-release)
#          if [ -n "$IMAGE_ID" ]; then
#            docker rmi $IMAGE_ID
#            echo "Removed image aerokube/selenoid:latest-release"
#          else
#            echo "Image aerokube/selenoid:latest-release not found"
#          fi
#
#      - name: Pull latest Selenoid image
#        run: docker pull aerokube/selenoid:latest-release

#      - name: Restart Selenoid
#        run: |
#          docker-compose down
#          docker-compose up -d

#      - name: Проверка версии селеноид
#        run: docker exec selenoid /usr/bin/selenoid -version
#
#      - name: Логи нового версии селеноид
#        run: docker logs selenoid | head -n 10



      - name: Show all containers (including failed)
        run: docker ps -a

      #      - name: Show logs of latest Firefox container
      #        run: |
      #          CID=$(docker ps -a --filter "ancestor=selenoid/vnc:firefox_124.0" -q | head -n1)
      #          if [ -n "$CID" ]; then
      #            echo "Firefox container logs:"
      #            docker logs $CID
      #          else
      #          echo "Firefox container not found"
      #          fi

      #      - name: Pull browser image for Selenoid
      #        run: docker pull selenoid/vnc:firefox_124.0

      - name: Pull browser image for Selenoid
        run: docker pull selenoid/vnc:chrome_124.0

      #      - name: Check that browser image is pulled
      #        run: docker images | grep firefox

      - name: Check that browser image is pulled
        run: docker images | grep chrome

      - name: Check Selenoid version from logs
        run: |
          CONTAINER_ID=$(docker ps -q -f name=selenoid)
          if [ -n "$CONTAINER_ID" ]; then
            echo "Selenoid version info from container logs:"
            docker logs "$CONTAINER_ID" | grep version || echo "Version info not found in logs"
          else
            echo "Selenoid container not found"
          fi

      - name: Check running containers
        run: docker ps -a

      - name: Wait for Selenoid to be ready
        run: |
          for i in {1..10}; do
            if curl -s http://localhost:4444/status | grep -q "ready"; then
              echo "Selenoid is ready"
              break
            fi
            echo "Waiting for Selenoid..."
            sleep 3
          done

      #      - name: Show logs of Firefox container (if exists)
      #        run: |
      #          CID=$(docker ps -a --filter "ancestor=selenoid/vnc:firefox_124.0" -q | head -n1)
      #          if [ -n "$CID" ]; then
      #            echo "Firefox container logs:"
      #            docker logs $CID
      #          else
      #            echo "Firefox container not found"
      #          fi

      - name: Log chrome container (если существует)
        run: |
          CID=$(docker ps -a --filter "ancestor=selenoid/vnc:chrome_124.0" -q | head -n1)
          if [ -n "$CID" ]; then
            docker logs $CID
          else
            echo "Chrome container not found"
          fi

      - name: Install Allure CLI manually
        run: |
          wget https://github.com/allure-framework/allure2/releases/download/2.34.0/allure-2.34.0.tgz
          tar -zxvf allure-2.34.0.tgz
          sudo mv allure-2.34.0 /opt/allure
          sudo ln -s /opt/allure/bin/allure /usr/bin/allure

      - name: Check running containers
        run: docker ps -a

      - name: Build project and run tests
        continue-on-error: true
        run: |
          mvn clean test \
            -Dgroups=test \
            -Dbrowser=chrome \
            -DbrowserVersion=124.0 \
            -Dmode=fullscreen \
            -Dremote.url=http://localhost:4444/

      - name: Show running containers
        run: docker ps -a

      - name: Show Selenoid logs
        run: docker logs selenoid

      - name: Generate Allure Report
        run: |
          allure generate target/allure-results --clean -o allure-report

      - name: Fix index.html base href
        run: |
          sed -i 's|<base href="/">|<base href="./">|' allure-report/index.html

      - name: Deploy Allure Report to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.PAT_TOKEN }}
          publish_dir: ./allure-report
          publish_branch: gh-pages